// Vitest Snapshot v1

exports[`FOL parser > can parse "!(tt && !(ff) && tt)" 1`] = `
NotFormula {
  "inner": ParenthesizedFormula {
    "inner": AndFormula {
      "left": AndFormula {
        "left": BooleanLiteral {
          "name": "⊤",
          "value": true,
        },
        "operator": "∧",
        "right": NotFormula {
          "inner": ParenthesizedFormula {
            "inner": BooleanLiteral {
              "name": "⊥",
              "value": false,
            },
          },
          "operator": "¬",
        },
      },
      "operator": "∧",
      "right": BooleanLiteral {
        "name": "⊤",
        "value": true,
      },
    },
  },
  "operator": "¬",
}
`;

exports[`FOL parser > can parse "!(tt && !ff) && tt" 1`] = `
AndFormula {
  "left": NotFormula {
    "inner": ParenthesizedFormula {
      "inner": AndFormula {
        "left": BooleanLiteral {
          "name": "⊤",
          "value": true,
        },
        "operator": "∧",
        "right": NotFormula {
          "inner": BooleanLiteral {
            "name": "⊥",
            "value": false,
          },
          "operator": "¬",
        },
      },
    },
    "operator": "¬",
  },
  "operator": "∧",
  "right": BooleanLiteral {
    "name": "⊤",
    "value": true,
  },
}
`;

exports[`FOL parser > can parse "!A(x)" 1`] = `
NotFormula {
  "inner": RelationFormula {
    "name": "A",
    "terms": [
      ConstantTerm {
        "name": "x",
      },
    ],
  },
  "operator": "¬",
}
`;

exports[`FOL parser > can parse "!ff" 1`] = `
NotFormula {
  "inner": BooleanLiteral {
    "name": "⊥",
    "value": false,
  },
  "operator": "¬",
}
`;

exports[`FOL parser > can parse "!tt && !(ff && tt)" 1`] = `
AndFormula {
  "left": NotFormula {
    "inner": BooleanLiteral {
      "name": "⊤",
      "value": true,
    },
    "operator": "¬",
  },
  "operator": "∧",
  "right": NotFormula {
    "inner": ParenthesizedFormula {
      "inner": AndFormula {
        "left": BooleanLiteral {
          "name": "⊥",
          "value": false,
        },
        "operator": "∧",
        "right": BooleanLiteral {
          "name": "⊤",
          "value": true,
        },
      },
    },
    "operator": "¬",
  },
}
`;

exports[`FOL parser > can parse "!tt" 1`] = `
NotFormula {
  "inner": BooleanLiteral {
    "name": "⊤",
    "value": true,
  },
  "operator": "¬",
}
`;

exports[`FOL parser > can parse "(forall x. A(x)) && (exists x. B(x))" 1`] = `
AndFormula {
  "left": ParenthesizedFormula {
    "inner": UniversalQuantorFormula {
      "inner": RelationFormula {
        "name": "A",
        "terms": [
          BoundVariable {
            "name": "x",
          },
        ],
      },
      "quantor": "∀",
      "variable": BoundVariable {
        "name": "x",
      },
    },
  },
  "operator": "∧",
  "right": ParenthesizedFormula {
    "inner": ExistentialQuantorFormula {
      "inner": RelationFormula {
        "name": "B",
        "terms": [
          BoundVariable {
            "name": "x",
          },
        ],
      },
      "quantor": "∃",
      "variable": BoundVariable {
        "name": "x",
      },
    },
  },
}
`;

exports[`FOL parser > can parse "(tt || ff) && tt" 1`] = `
AndFormula {
  "left": ParenthesizedFormula {
    "inner": OrFormula {
      "left": BooleanLiteral {
        "name": "⊤",
        "value": true,
      },
      "operator": "∨",
      "right": BooleanLiteral {
        "name": "⊥",
        "value": false,
      },
    },
  },
  "operator": "∧",
  "right": BooleanLiteral {
    "name": "⊤",
    "value": true,
  },
}
`;

exports[`FOL parser > can parse "A(x) & B(x)" 1`] = `
AndFormula {
  "left": RelationFormula {
    "name": "A",
    "terms": [
      ConstantTerm {
        "name": "x",
      },
    ],
  },
  "operator": "∧",
  "right": RelationFormula {
    "name": "B",
    "terms": [
      ConstantTerm {
        "name": "x",
      },
    ],
  },
}
`;

exports[`FOL parser > can parse "A(x) && B(x)" 1`] = `
AndFormula {
  "left": RelationFormula {
    "name": "A",
    "terms": [
      ConstantTerm {
        "name": "x",
      },
    ],
  },
  "operator": "∧",
  "right": RelationFormula {
    "name": "B",
    "terms": [
      ConstantTerm {
        "name": "x",
      },
    ],
  },
}
`;

exports[`FOL parser > can parse "A(x) <-> B(x)" 1`] = `
BiImplicationFormula {
  "left": RelationFormula {
    "name": "A",
    "terms": [
      ConstantTerm {
        "name": "x",
      },
    ],
  },
  "operator": "↔",
  "right": RelationFormula {
    "name": "B",
    "terms": [
      ConstantTerm {
        "name": "x",
      },
    ],
  },
}
`;

exports[`FOL parser > can parse "A(x) | B(x)" 1`] = `
OrFormula {
  "left": RelationFormula {
    "name": "A",
    "terms": [
      ConstantTerm {
        "name": "x",
      },
    ],
  },
  "operator": "∨",
  "right": RelationFormula {
    "name": "B",
    "terms": [
      ConstantTerm {
        "name": "x",
      },
    ],
  },
}
`;

exports[`FOL parser > can parse "A(x) || B(x)" 1`] = `
OrFormula {
  "left": RelationFormula {
    "name": "A",
    "terms": [
      ConstantTerm {
        "name": "x",
      },
    ],
  },
  "operator": "∨",
  "right": RelationFormula {
    "name": "B",
    "terms": [
      ConstantTerm {
        "name": "x",
      },
    ],
  },
}
`;

exports[`FOL parser > can parse "A(x) -> B(x)" 1`] = `
ImplicationFormula {
  "left": RelationFormula {
    "name": "A",
    "terms": [
      ConstantTerm {
        "name": "x",
      },
    ],
  },
  "operator": "→",
  "right": RelationFormula {
    "name": "B",
    "terms": [
      ConstantTerm {
        "name": "x",
      },
    ],
  },
}
`;

exports[`FOL parser > can parse "A(x)" 1`] = `
RelationFormula {
  "name": "A",
  "terms": [
    ConstantTerm {
      "name": "x",
    },
  ],
}
`;

exports[`FOL parser > can parse "A(x,y)" 1`] = `
RelationFormula {
  "name": "A",
  "terms": [
    ConstantTerm {
      "name": "x",
    },
    ConstantTerm {
      "name": "y",
    },
  ],
}
`;

exports[`FOL parser > can parse "Relation(x)" 1`] = `
RelationFormula {
  "name": "Relation",
  "terms": [
    ConstantTerm {
      "name": "x",
    },
  ],
}
`;

exports[`FOL parser > can parse "a = b" 1`] = `
EqualityRelationFormula {
  "firstTerm": ConstantTerm {
    "name": "a",
  },
  "secondTerm": ConstantTerm {
    "name": "b",
  },
}
`;

exports[`FOL parser > can parse "a = f(a,b)" 1`] = `
EqualityRelationFormula {
  "firstTerm": ConstantTerm {
    "name": "a",
  },
  "secondTerm": FunctionTerm {
    "argumentTerms": [
      ConstantTerm {
        "name": "a",
      },
      ConstantTerm {
        "name": "b",
      },
    ],
    "name": "f",
  },
}
`;

exports[`FOL parser > can parse "exists a . tt" 1`] = `
ExistentialQuantorFormula {
  "inner": BooleanLiteral {
    "name": "⊤",
    "value": true,
  },
  "quantor": "∃",
  "variable": BoundVariable {
    "name": "a",
  },
}
`;

exports[`FOL parser > can parse "exists x. A(x)" 1`] = `
ExistentialQuantorFormula {
  "inner": RelationFormula {
    "name": "A",
    "terms": [
      BoundVariable {
        "name": "x",
      },
    ],
  },
  "quantor": "∃",
  "variable": BoundVariable {
    "name": "x",
  },
}
`;

exports[`FOL parser > can parse "f(a) = a" 1`] = `
EqualityRelationFormula {
  "firstTerm": FunctionTerm {
    "argumentTerms": [
      ConstantTerm {
        "name": "a",
      },
    ],
    "name": "f",
  },
  "secondTerm": ConstantTerm {
    "name": "a",
  },
}
`;

exports[`FOL parser > can parse "f(g(x)) = y" 1`] = `
EqualityRelationFormula {
  "firstTerm": FunctionTerm {
    "argumentTerms": [
      FunctionTerm {
        "argumentTerms": [
          ConstantTerm {
            "name": "x",
          },
        ],
        "name": "g",
      },
    ],
    "name": "f",
  },
  "secondTerm": ConstantTerm {
    "name": "y",
  },
}
`;

exports[`FOL parser > can parse "f(x) = y" 1`] = `
EqualityRelationFormula {
  "firstTerm": FunctionTerm {
    "argumentTerms": [
      ConstantTerm {
        "name": "x",
      },
    ],
    "name": "f",
  },
  "secondTerm": ConstantTerm {
    "name": "y",
  },
}
`;

exports[`FOL parser > can parse "ff" 1`] = `
BooleanLiteral {
  "name": "⊥",
  "value": false,
}
`;

exports[`FOL parser > can parse "forall a. tt" 1`] = `
UniversalQuantorFormula {
  "inner": BooleanLiteral {
    "name": "⊤",
    "value": true,
  },
  "quantor": "∀",
  "variable": BoundVariable {
    "name": "a",
  },
}
`;

exports[`FOL parser > can parse "forall x. A(x)" 1`] = `
UniversalQuantorFormula {
  "inner": RelationFormula {
    "name": "A",
    "terms": [
      BoundVariable {
        "name": "x",
      },
    ],
  },
  "quantor": "∀",
  "variable": BoundVariable {
    "name": "x",
  },
}
`;

exports[`FOL parser > can parse "forall x. exists y. forall z. f(x) = y && R(y,z) && R(z,y) || (f(x) = x -> f(z) = a <-> ff)" 1`] = `
UniversalQuantorFormula {
  "inner": ExistentialQuantorFormula {
    "inner": UniversalQuantorFormula {
      "inner": OrFormula {
        "left": AndFormula {
          "left": AndFormula {
            "left": EqualityRelationFormula {
              "firstTerm": FunctionTerm {
                "argumentTerms": [
                  BoundVariable {
                    "name": "x",
                  },
                ],
                "name": "f",
              },
              "secondTerm": BoundVariable {
                "name": "y",
              },
            },
            "operator": "∧",
            "right": RelationFormula {
              "name": "R",
              "terms": [
                BoundVariable {
                  "name": "y",
                },
                BoundVariable {
                  "name": "z",
                },
              ],
            },
          },
          "operator": "∧",
          "right": RelationFormula {
            "name": "R",
            "terms": [
              BoundVariable {
                "name": "z",
              },
              BoundVariable {
                "name": "y",
              },
            ],
          },
        },
        "operator": "∨",
        "right": ParenthesizedFormula {
          "inner": BiImplicationFormula {
            "left": ImplicationFormula {
              "left": EqualityRelationFormula {
                "firstTerm": FunctionTerm {
                  "argumentTerms": [
                    BoundVariable {
                      "name": "x",
                    },
                  ],
                  "name": "f",
                },
                "secondTerm": BoundVariable {
                  "name": "x",
                },
              },
              "operator": "→",
              "right": EqualityRelationFormula {
                "firstTerm": FunctionTerm {
                  "argumentTerms": [
                    BoundVariable {
                      "name": "z",
                    },
                  ],
                  "name": "f",
                },
                "secondTerm": ConstantTerm {
                  "name": "a",
                },
              },
            },
            "operator": "↔",
            "right": BooleanLiteral {
              "name": "⊥",
              "value": false,
            },
          },
        },
      },
      "quantor": "∀",
      "variable": BoundVariable {
        "name": "z",
      },
    },
    "quantor": "∃",
    "variable": BoundVariable {
      "name": "y",
    },
  },
  "quantor": "∀",
  "variable": BoundVariable {
    "name": "x",
  },
}
`;

exports[`FOL parser > can parse "forall x. forall y. A(x, y)" 1`] = `
UniversalQuantorFormula {
  "inner": UniversalQuantorFormula {
    "inner": RelationFormula {
      "name": "A",
      "terms": [
        BoundVariable {
          "name": "x",
        },
        BoundVariable {
          "name": "y",
        },
      ],
    },
    "quantor": "∀",
    "variable": BoundVariable {
      "name": "y",
    },
  },
  "quantor": "∀",
  "variable": BoundVariable {
    "name": "x",
  },
}
`;

exports[`FOL parser > can parse "forall x. forall y. h(x,y) = x" 1`] = `
UniversalQuantorFormula {
  "inner": UniversalQuantorFormula {
    "inner": EqualityRelationFormula {
      "firstTerm": FunctionTerm {
        "argumentTerms": [
          BoundVariable {
            "name": "x",
          },
          BoundVariable {
            "name": "y",
          },
        ],
        "name": "h",
      },
      "secondTerm": BoundVariable {
        "name": "x",
      },
    },
    "quantor": "∀",
    "variable": BoundVariable {
      "name": "y",
    },
  },
  "quantor": "∀",
  "variable": BoundVariable {
    "name": "x",
  },
}
`;

exports[`FOL parser > can parse "myConstant = myConstant" 1`] = `
EqualityRelationFormula {
  "firstTerm": ConstantTerm {
    "name": "myConstant",
  },
  "secondTerm": ConstantTerm {
    "name": "myConstant",
  },
}
`;

exports[`FOL parser > can parse "myRelation(MyFunction(someConstant, AnotherConstant))" 1`] = `
RelationFormula {
  "name": "myRelation",
  "terms": [
    FunctionTerm {
      "argumentTerms": [
        ConstantTerm {
          "name": "someConstant",
        },
        ConstantTerm {
          "name": "AnotherConstant",
        },
      ],
      "name": "MyFunction",
    },
  ],
}
`;

exports[`FOL parser > can parse "tt && tt" 1`] = `
AndFormula {
  "left": BooleanLiteral {
    "name": "⊤",
    "value": true,
  },
  "operator": "∧",
  "right": BooleanLiteral {
    "name": "⊤",
    "value": true,
  },
}
`;

exports[`FOL parser > can parse "tt <-> tt" 1`] = `
BiImplicationFormula {
  "left": BooleanLiteral {
    "name": "⊤",
    "value": true,
  },
  "operator": "↔",
  "right": BooleanLiteral {
    "name": "⊤",
    "value": true,
  },
}
`;

exports[`FOL parser > can parse "tt || ff && tt" 1`] = `
OrFormula {
  "left": BooleanLiteral {
    "name": "⊤",
    "value": true,
  },
  "operator": "∨",
  "right": AndFormula {
    "left": BooleanLiteral {
      "name": "⊥",
      "value": false,
    },
    "operator": "∧",
    "right": BooleanLiteral {
      "name": "⊤",
      "value": true,
    },
  },
}
`;

exports[`FOL parser > can parse "tt || tt" 1`] = `
OrFormula {
  "left": BooleanLiteral {
    "name": "⊤",
    "value": true,
  },
  "operator": "∨",
  "right": BooleanLiteral {
    "name": "⊤",
    "value": true,
  },
}
`;

exports[`FOL parser > can parse "tt -> tt" 1`] = `
ImplicationFormula {
  "left": BooleanLiteral {
    "name": "⊤",
    "value": true,
  },
  "operator": "→",
  "right": BooleanLiteral {
    "name": "⊤",
    "value": true,
  },
}
`;

exports[`FOL parser > can parse "tt" 1`] = `
BooleanLiteral {
  "name": "⊤",
  "value": true,
}
`;
